Anotações: 
    Tipos de abstrações: 
        1 - Driver Nativo (Diretamente com o banco de dados(query por completo))
        2 - Query Builder(knext) (simplifica comandos query para uma sintaxe mais simples)
        3 - ORM (sequelize)





Dependencias e comandos:
1 - "yarn init -y" (criar o package.json) and "yarn add express pg pg-hstore sequelize"
2 - "yarn add sequelize-cli -D" (interface de linha de comando) yarn sequelize --help (comandos disponiveis)
3 - "yarn add nodemon -D" crair script => script:{ dev : nodemon src/server.js}
4 -  create file ".sequelizerc" and Config.                   yarn sequelize db:create para criar o Banco
5 -  yarn sequelize migration:create --name=create-users  (Migration que cria a tabela de usuários)
6 - yarn sequelize db:migrate (para efetivar a criação da migration (criação ou alteração de tabelas)) yarn sequelize db:migrate:undo (para desfazer)
7 - yarn sequelize migration:create --name=create-addresses (molde para criar a tabela de endereços)
8 - 
9 - 
10 - 
11 - 
12 - 
13 - 
14 - 
15 - 




alternativa de banco em nuvem: ElephantSQL

# caso de erro com o bluebird, execute esse comando: npm i bluebird